export default `
<h3>14. Пакетный менеджер</h3>

<h5>Введение</h5>

<p><span>npm</span> - это стандатный пакетный менеджер Node.js. 

<p>В январе 2017 года в npm числилось свыше 350 000 пакетов, что сделало его самым большим репозиторием кода на одном языке программирования на Земле. Можете быть уверенными в том, что на сегодняшний день существуют пакеты для решения почти любых задач. 

<p>Все начиналось с загрузки и управления зависимостями в Node.js, но вскоре данный инструмент стал активно использоваться при разработке клиентской части приложений. 

<p><span>npm</span> делает несколько вещей. 

<p>Альтернативой npm является <a href="https://classic.yarnpkg.com/en/">yarn</a>.

<h5>Загрузка</h5>

<p><span>npm</span> управляет загрузкой зависимостей проекта.

<p>Если в проекте существует файл <span>package.json</span>, с помощью запуска <span>npm install</span> будет установлено все, что требуется проекту, в каталог <span>node_modules</span>, который создается при отсутствии. 

<p>Определенный пакет можно установить с помощью <span>npm install &lt;package-name&gt;</span>. 

<p>Часто установка пакета сопровождается флагами:

<ul>
    <li>--save - установка пакета и добавление записи о нем в раздел "dependencies" файла <span>package.json</span></li>
    <li>--save-dev - установка пакета и добавление записи о нем в раздел "devDependencies" файла <span>package.json</span></li>
</ul>

<p>Разница между этими файлами состоит в том, что devDependencies используется в целях разработки, например, для тестирования, а dependencies - в продакшне (при сборке готового проекта). 

<h5>Обновление пакетов</h5>

<p>Обновление выполняется с помощью <span>npm update</span>. 

<p><span>npm</span> проверит пакеты на наличие новых версий, удовлетворяющих установленным ограничениям. 

<p>Вы также можете обновить лишь определенный пакет: <span>npm update &lt;package-name&gt;</span>. 

<h5>Версионирование</h5>

<p>В дополнение к стандартной загрузке, npm поддерживает версионирование, поэтому вы можете определить конкретную версию пакета, или запросить более новую или старую версию. 

<p>Вам часто придется сталкиваться с тем, что одна библиотека совместима только с определенной (мажорной) версией другой библиотеки. 

<p>А также с багами последних релизов, которые не устраняются долгое время. 

<p>Определение версий также способствует командной разработке, поскольку каждый член команды знает, какую версию использовать до обновления файла <span>package.json</span>. 

<p>Во всех этих случаях помогает версионирование, в этом плане <span>npm</span> следует общепринятым стандартам. 

<h5>Выполнение задач</h5>

<p><span>package.json</span> поддерживает формат для определения команд, выполняемых в терминале, с помощью <span>npm run &lt;task-name&gt;</span>. 

<p>Например:

<code>
{
    "scripts": {
        "start-dev": "node lib/server-development",
        "start": "node lib/server-production"
    },
}
</code>

<p>Распространенной практикой является использование этой возможности для запуска Webpack:
 
<code>
{
    "scripts": {
        "watch": "webpack --watch --progress --colors --config webpack.conf.js",
        "dev": "webpack --progress --colors --config webpack.conf.js",
        "prod": "NODE_ENV=production webpack -p --config webpack.conf.js"
    },
}
</code>

<p>Это позволяет вместо набора длинных команд, которые легко забыть, или при наборе которых легко ошибиться, делать так:

<code>
npm run watch 
npm run dev 
npm run prod 
</code>
`