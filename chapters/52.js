export default `
<h3>52. Разница между средой для разработки и средой для продакшна</h3>

<p>Вы можете определять разные настройки для среды разработки и продакшн-среды. 

<p>По умолчанию Node.js запускает среду для разработки. Вы можете изменить это поведение с помощью переменной среды <span>NODE_ENV</span>, присвоив ей значение <span>production</span>: <span>NODE_ENV=production</span>. 

<p>Обычно, это делается с помощью запуска команды 

<code>
export NODE_ENV=production 
</code>

<p>в терминале, но лучше сохранить настройки терминала в файле конфигурации (например, <span>.bash_profile</span>, если вы работаете с Bash), в противном случае, настройки будут сброшены при перезагрузке системы. 

<p>Также переменные среды можно определить перед запуском приложения: 

<code>
NODE_ENV=production node app.js 
</code>

<p>Эта переменная среды широко используется в сторонних библиотеках. 

<p>Режим <span>production</span>, как правило, означает следующее: 

<ul>
    <li>минимальное логгирование, в лог выводится только самое необходимое</li>
    <li>для оптимизации производительности используется больше уровней кэширования</li>
</ul>

<p>Например, Pug, библиотека шаблонов, используемая Express, компилируется в режиме отладки, если <span>NODE_ENV</span> не присвоено значение <span>production</span>. Представления в Express в режиме разработки компилируются при каждом запросе, в то время как в режиме продакшна они кэшируются. Существует много других примеров. 

<p>Вы можете использовать условные операторы для выполнения кода в разных режимах: 

<code>
if (process.env.NODE_ENV === 'development') {
    // ... 
}
if (process.env.NODE_ENV === 'production') {
    // ... 
}
</code>

<p>В Express-приложении, например, вы можете использовать такой подход для определения разного уровня обработки ошибок: 

<code>
if (process.env.NODE_ENV === "development") {
    app.use(express.errorHandler({ dumpExceptions: true, showStack: true }))
})
    
if (process.env.NODE_ENV === "production") {
    app.use(express.errorHandler())
})
</code>
`