export default `
<h3>1. Введение</h3>

<p>Node.js - это открытая кроссплатформенная среда выполнения серверного JavaScript, которая отлично подходит для решения почти любой задачи.

<p>Node.js запускает движок JavaScript V8, ядро Google Chrome, вне браузера. Это обуславливает высокую производительность Node.js. 

<p>Node.js-приложения выполняются в виде единого процесса, без создания нового потока для каждого запроса. Node.js предоставляет набор асинхронных примитивов ввода/вывода в стандартной библиотеке, что предотвращает блокировку JavaScript-кода. Как правило, библиотеки в Node.js написаны с помощью асинхронных инструментов, что делает блокирующее поведение скорее исключением, чем правилом. 

<p>Когда Node.js выполняет операцию ввода/вывода, например, чтение данных из сети, доступ к базе данных или файловой системе, вместо того, чтобы блокировать поток и ожидать завершения очередного цикла центрального процессора, Node.js продолжает выполнять операцию после получения ответа. 

<p>Это позволяет Node.js обрабатывать одновременно тысячи запросов с помощью одного сервера без необходимости создания системы обеспечения согласованности потоков, которая может стать источником серьезных ошибок. 

<p>Существенное преимущество Node.js состоит в том, что миллионы разработчиков, пишущих код на JavaScript для браузера, теперь имеют возможность писать серверный код без необходимости изучения другого языка программирования. 

<p>В Node.js новые ECMAScript-стандарты могут использоваться без проблем, вам не нужно ждать, пока все пользователи обновят свои браузеры - вы сами решаете, какую версию ECMAScript использовать через изменение версии Node.js. Вы также можете добавить экспериментальные возможности, запустив Node.js с соответствующими флагами. 

<h5>Огромное количество библиотек</h5>

<p>Npm с его простой структурой способствует быстрому росту экосистемы Node.js, на сегодняшний день в npm зарегистрировано свыше 1 000 000 открытых пакетов, которые вы можете использовать совершенно бесплатно. 

<h5>Пример Node.js-приложения</h5>

Наиболее распространенным примером использования Node.js является создание веб-сервера:

<code>
const http = require('http')

const hostname = '127.0.0.1'
const port = process.env.PORT 

const server = http.createServer((req, res) => {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World!\n')
})

server.listen(port, hostname, () => {
    console.log(\`Server running at http://&#36;{hostname}:&#36;{port}/\`)
})
</code>

<p>Первым делом, мы подключаем модуль <a href="https://nodejs.org/api/http.html">http</a>. 

<p>Node.js имеет превосходную стандартную библиотеку, обеспечивающую первоклассную поддержку работы с сетью. 

<p>Метод <span>createServer()</span> создает новый HTTP-сервер и возвращает его. 

<p>Сервер устанавливается на прослушивание определенного порта и хоста. Когда сервер готов, запускается функция обратного вызова, в данном случае, сообщающая о том, что сервер запущен. 

<p>При получениее нового запроса вызывается событие <a href="https://nodejs.org/api/http.html#http_event_request">request</a>, содержащее два объекта: запрос (объект <a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage">http.IncomingMessage</a> (входящее сообщение)) и ответ (объект <a href="https://nodejs.org/api/http.html#http_class_http_serverresponse">http.ServerResponse</a> (ответ сервера)). 

<p>Эти объекты необходимы для обработки HTTP-запроса. 

<p>Первый объект содержит детали запроса. В нашем примере он не используется, но, при желании, вы можете получить доступ к заголовкам запроса и его данным. 

<p>Второй объект используется для предоставления данных отправителю запроса. 

<p>В данном случае, посредством <span>res.statusCode = 200</span> мы присваиваем свойству statusCode значение 200 в качестве индикатора успешного выполнения запроса. 

<p>Мы устанавливает заголовок Content-Type (тип содержимого или контента) <span>res.setHeader('Content-Type', 'text/plain')</span> и закрываем ответ, добавляя контент в качестве аргумента в <span>end()</span>: <span>res.end('Hello World\n')</span>

<h5>Node.js-фреймворки и инструменты</h5>

<p>Node.js - это обширная платформа. С целью удовлетворения потребностей разработчиков были созданы тысячи различных библиотек. 

<p>Со временем многие из них стали очень популярными. Вот список некоторых из них:

<ul>
    <li><a href="https://adonisjs.com/">AdonisJs</a>: фуллстек-фреймворк с акцентом на эргономику, стабильность и надежность. Adonis - один из самых быстрых веб-фреймворков для Node.js.</li>
    <li><a href="https://expressjs.com/">Express</a>: предоставляет один из самых простых и одновременно самых мощных способов создания веб-сервера. Ключем его успеха является минималистичный подход, простой функционал, акцент на основных возможностях сервера.</li>
    <li><a href="https://www.fastify.io/">Fastify</a>: веб-фреймворк, сфокусированный на обеспечении лучшего опыта разработки с минимальными накладными расходами и мощной архитектурой плагина. Fastify является одним из самых проивзодительных веб-фреймворков.</li>
    <li><a href="https://hapi.dev/">hapi</a>: фреймворк с богатым функционалом для создания приложений и сервисов, позволяющий разработчикам сосредоточиться на написании переиспользуемой логики приложений вместо траты времени на построение инфраструктуры.</li>
    <li><a href="https://koajs.com/">koa</a>: создан командой Express в целях упрощения и уменьшения размера библиотеки с учетом многолетнего опыта. Новый проект возник из-за необходимости внесения несовместимых изменений без разрушения сообщества, сформировавшего вокруг Express.</li>
    <li><a href="https://loopback.io/">Loopback.io</a>: облегчает создание современных приложений со сложной системой зависимостей.</li>
    <li><a href="https://www.meteor.com/">Meteor</a>: невероятно мощный фуллстек-фреймворк, предоставляющий изоморфный подход для создания приложений на JavaScript, когда код разделяется между клиентом и сервером. Когда-то meteor представлял собой готовое решение, содержащее все необходимое, сейчас он прекрасно сочетается с <a href="https://reactjs.org/">React</a>, <a href="https://vuejs.org/">Vue</a> и <a href="https://angular.io/">Angular</a>. ОН также может использоваться для создания мобильных приложений.</li>
    <li><a href="https://github.com/vercel/micro">Micro</a>: предоставляет легковесный сервер для создания асинхронных HTTP-микросервисов.</li>
    <li><a href="https://nestjs.com/">NestJS</a>: основанный на TypeScript прогрессивный Node.js-фреймворк для создания корпоративных, надежных и масштабируемых серверных приложений.</li>
    <li><a href="https://nextjs.org/">Next.js</a>: фреймворк для рендеринга React-приложений на стороне сервера.</li>
    <li><a href="https://nx.dev/">Nx</a>: инструмент для фуллстек монолитной разработки посредством NestJS, Express, React, Angular и т.д. Nx помогает масштабировать разработку от одной до нескольких команд, работающих одновременно над множеством приложений.</li>
    <li><a href="https://socket.io/">Socket.io</a>: движок для коммуникации в режиме реального времени для создания сетевых приложений.</li>
</ul>
`