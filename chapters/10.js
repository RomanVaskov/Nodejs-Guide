export default `
<h3>10. Передача аргументов из командной строки</h3>

<p>При запуске Node.js-приложения вы можете передать ему любое количество аргументов. 

<p>Аргументы могут быть автономными или содержать ключ и значение. 

<p>Например:

<code>
node app.js joe
</code>

<p>или 

<code>
node app.js name=joe 
</code>

<p>От этого зависит, как вы будете извлекать значения в Node.js-коде. 

<p>Для извлечение значений используется встроенный объект <span>process</span>. 

<p>В свойстве <span>argv</span> этого объекта содержится массив аргументов, переданных из командной строки. 

<p>Первый аргумент - это полный путь команды <span>node</span>. 

<p>Второй - полный путь исполняемого файла. 

<p>Интересующие нас аргументы начинаются с третьей позиции (индекса массива). 

<p>Вы можете перебрать аргументы (включая путь node и путь файла) в цикле:

<code>
process.argv.forEach((val, index) => {
    console.log(\`&#36;{index}: &#36;{val}\`)
})
</code>

<p>Переданные аргументы можно получить, создав новый массив без первых двух параметров:

<code>
const args = process.argv.slice(2)
</code>

<p>Если у нас имеется один аргумент без индекса (ключа):

<code>
node app.js joe
</code>

<p>мы можем получить его следующим образом:

<code>
const args = process.argv.slice(2)
args[0]
</code>

<p>В этом случае:

<code>
node app.js name=joe
</code>

<p><span>args[0]</span> - это <span>name=joe</span>, поэтому нам нужно его разобрать. Лучшим способом это сделать является использование библиотеки <a href="https://www.npmjs.com/package/minimist">minimist</a>, предназначенной для работы с аргументами:

<code>
const args = require('minimist')(process.argv.slice(2))
args['name'] // joe
</code>

<p>Здесь необходимо использовать двойное тире перед каждым аргументом:

<code>
node app.js --name=joe
</code>
`